// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent_brain.proto

#include "agent_brain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_agent_5fbrain_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_agent_5fbrain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_slam_data_keypoint;
}  // namespace protobuf_agent_5fbrain_2eproto
namespace agent_brain {
class slam_data_keypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<slam_data_keypoint>
      _instance;
} _slam_data_keypoint_default_instance_;
class slam_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<slam_data>
      _instance;
} _slam_data_default_instance_;
}  // namespace agent_brain
namespace protobuf_agent_5fbrain_2eproto {
static void InitDefaultsslam_data_keypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_brain::_slam_data_keypoint_default_instance_;
    new (ptr) ::agent_brain::slam_data_keypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_brain::slam_data_keypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_slam_data_keypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsslam_data_keypoint}, {}};

static void InitDefaultsslam_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_brain::_slam_data_default_instance_;
    new (ptr) ::agent_brain::slam_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_brain::slam_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_slam_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsslam_data}, {
      &protobuf_agent_5fbrain_2eproto::scc_info_slam_data_keypoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_slam_data_keypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_slam_data.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data_keypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data_keypoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data_keypoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data_keypoint, bgr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data, keypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agent_brain::slam_data, descriptions_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::agent_brain::slam_data_keypoint)},
  { 8, -1, sizeof(::agent_brain::slam_data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::agent_brain::_slam_data_keypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agent_brain::_slam_data_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "agent_brain.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021agent_brain.proto\022\013agent_brain\"\204\001\n\tsla"
      "m_data\0222\n\tkeypoints\030\001 \003(\0132\037.agent_brain."
      "slam_data.keypoint\022\024\n\014descriptions\030\002 \003(\t"
      "\032-\n\010keypoint\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\013\n\003bg"
      "r\030\003 \003(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agent_brain.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_agent_5fbrain_2eproto
namespace agent_brain {

// ===================================================================

void slam_data_keypoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int slam_data_keypoint::kXFieldNumber;
const int slam_data_keypoint::kYFieldNumber;
const int slam_data_keypoint::kBgrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

slam_data_keypoint::slam_data_keypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_agent_5fbrain_2eproto::scc_info_slam_data_keypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_brain.slam_data.keypoint)
}
slam_data_keypoint::slam_data_keypoint(const slam_data_keypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bgr_(from.bgr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:agent_brain.slam_data.keypoint)
}

void slam_data_keypoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

slam_data_keypoint::~slam_data_keypoint() {
  // @@protoc_insertion_point(destructor:agent_brain.slam_data.keypoint)
  SharedDtor();
}

void slam_data_keypoint::SharedDtor() {
}

void slam_data_keypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* slam_data_keypoint::descriptor() {
  ::protobuf_agent_5fbrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agent_5fbrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const slam_data_keypoint& slam_data_keypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_agent_5fbrain_2eproto::scc_info_slam_data_keypoint.base);
  return *internal_default_instance();
}


void slam_data_keypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_brain.slam_data.keypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgr_.Clear();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool slam_data_keypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent_brain.slam_data.keypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bgr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bgr())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_bgr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent_brain.slam_data.keypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent_brain.slam_data.keypoint)
  return false;
#undef DO_
}

void slam_data_keypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent_brain.slam_data.keypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // repeated uint32 bgr = 3;
  if (this->bgr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bgr_cached_byte_size_));
  }
  for (int i = 0, n = this->bgr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->bgr(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agent_brain.slam_data.keypoint)
}

::google::protobuf::uint8* slam_data_keypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agent_brain.slam_data.keypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // repeated uint32 bgr = 3;
  if (this->bgr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bgr_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->bgr_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_brain.slam_data.keypoint)
  return target;
}

size_t slam_data_keypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_brain.slam_data.keypoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 bgr = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bgr_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bgr_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void slam_data_keypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_brain.slam_data.keypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const slam_data_keypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const slam_data_keypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_brain.slam_data.keypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_brain.slam_data.keypoint)
    MergeFrom(*source);
  }
}

void slam_data_keypoint::MergeFrom(const slam_data_keypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_brain.slam_data.keypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bgr_.MergeFrom(from.bgr_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void slam_data_keypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_brain.slam_data.keypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slam_data_keypoint::CopyFrom(const slam_data_keypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_brain.slam_data.keypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slam_data_keypoint::IsInitialized() const {
  return true;
}

void slam_data_keypoint::Swap(slam_data_keypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void slam_data_keypoint::InternalSwap(slam_data_keypoint* other) {
  using std::swap;
  bgr_.InternalSwap(&other->bgr_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata slam_data_keypoint::GetMetadata() const {
  protobuf_agent_5fbrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agent_5fbrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void slam_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int slam_data::kKeypointsFieldNumber;
const int slam_data::kDescriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

slam_data::slam_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_agent_5fbrain_2eproto::scc_info_slam_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_brain.slam_data)
}
slam_data::slam_data(const slam_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keypoints_(from.keypoints_),
      descriptions_(from.descriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agent_brain.slam_data)
}

void slam_data::SharedCtor() {
}

slam_data::~slam_data() {
  // @@protoc_insertion_point(destructor:agent_brain.slam_data)
  SharedDtor();
}

void slam_data::SharedDtor() {
}

void slam_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* slam_data::descriptor() {
  ::protobuf_agent_5fbrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agent_5fbrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const slam_data& slam_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_agent_5fbrain_2eproto::scc_info_slam_data.base);
  return *internal_default_instance();
}


void slam_data::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_brain.slam_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.Clear();
  descriptions_.Clear();
  _internal_metadata_.Clear();
}

bool slam_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent_brain.slam_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent_brain.slam_data.keypoint keypoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string descriptions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_descriptions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptions(this->descriptions_size() - 1).data(),
            static_cast<int>(this->descriptions(this->descriptions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent_brain.slam_data.descriptions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent_brain.slam_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent_brain.slam_data)
  return false;
#undef DO_
}

void slam_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent_brain.slam_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agent_brain.slam_data.keypoint keypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keypoints(static_cast<int>(i)),
      output);
  }

  // repeated string descriptions = 2;
  for (int i = 0, n = this->descriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptions(i).data(), static_cast<int>(this->descriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent_brain.slam_data.descriptions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->descriptions(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agent_brain.slam_data)
}

::google::protobuf::uint8* slam_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agent_brain.slam_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agent_brain.slam_data.keypoint keypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keypoints(static_cast<int>(i)), deterministic, target);
  }

  // repeated string descriptions = 2;
  for (int i = 0, n = this->descriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptions(i).data(), static_cast<int>(this->descriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent_brain.slam_data.descriptions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->descriptions(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_brain.slam_data)
  return target;
}

size_t slam_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_brain.slam_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .agent_brain.slam_data.keypoint keypoints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints(static_cast<int>(i)));
    }
  }

  // repeated string descriptions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->descriptions_size());
  for (int i = 0, n = this->descriptions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->descriptions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void slam_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_brain.slam_data)
  GOOGLE_DCHECK_NE(&from, this);
  const slam_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const slam_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_brain.slam_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_brain.slam_data)
    MergeFrom(*source);
  }
}

void slam_data::MergeFrom(const slam_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_brain.slam_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoints_.MergeFrom(from.keypoints_);
  descriptions_.MergeFrom(from.descriptions_);
}

void slam_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_brain.slam_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slam_data::CopyFrom(const slam_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_brain.slam_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slam_data::IsInitialized() const {
  return true;
}

void slam_data::Swap(slam_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void slam_data::InternalSwap(slam_data* other) {
  using std::swap;
  CastToBase(&keypoints_)->InternalSwap(CastToBase(&other->keypoints_));
  descriptions_.InternalSwap(CastToBase(&other->descriptions_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata slam_data::GetMetadata() const {
  protobuf_agent_5fbrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agent_5fbrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace agent_brain
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::agent_brain::slam_data_keypoint* Arena::CreateMaybeMessage< ::agent_brain::slam_data_keypoint >(Arena* arena) {
  return Arena::CreateInternal< ::agent_brain::slam_data_keypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::agent_brain::slam_data* Arena::CreateMaybeMessage< ::agent_brain::slam_data >(Arena* arena) {
  return Arena::CreateInternal< ::agent_brain::slam_data >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
